var capDesc = {
  SETPCAP: '修改流程处理能力.',
  MKNOD: '使用mknod(2)创建特殊文件.',
  AUDIT_WRITE: '将记录写入内核审计日志.',
  CHOWN: '修改文件的UID和GID（请参阅chown(2)）.',
  NET_RAW: '使用RAW和PACKET套接字.',
  DAC_OVERRIDE: '使用RAW和PACKET套接字.',
  FOWNER: '绕过对通常需要进程的文件系统UID匹配文件UID的操作权限检查.',
  FSETID: '修改文件时,不清除set-user-ID和set-group-ID的权限位.',
  KILL: '绕过权限检查发送的信号.',
  SETGID: '对进程GID和补充GID列表进行设置操作.',
  SETUID: '对进程UID进行设置操作.',
  NET_BIND_SERVICE: '套接字绑定到Internet域的特权端口（端口号小于1024）.',
  SYS_CHROOT: '使用chroot(2),更改根目录.',
  SETFCAP: '设置文件功能.',
  SYS_MODULE: '加载和卸载内核模块.',
  SYS_RAWIO: '执行I/O端口操作（iopl(2)和ioperm(2)）.',
  SYS_PACCT: '使用acct(2),打开或关闭处理流程统计.',
  SYS_ADMIN: '执行一系列的系统管理操作.',
  SYS_NICE: '调整并更改进程的nice值（nice(2)，setpriority(2)）.',
  SYS_RESOURCE: '覆盖资源的限制设置',
  SYS_TIME: '设置系统时钟（settimeofday(2),stime(2),adjtimex(2)）;设置实时（硬件）时钟.',
  SYS_TTY_CONFIG: '使用vhangup(2);在虚拟终端上使用各种特权ioctl(2)操作.',
  AUDIT_CONTROL: '启用和禁用内核审计;更改审计过滤规则;检索审计状态和过滤规则.',
  MAC_ADMIN: '允许配置MAC或更改状态,使用Smack LSM.',
  MAC_OVERRIDE: '覆盖强制访问控制（MAC）的设置. 使用Smack Linux安全模块（LSM）.',
  NET_ADMIN: '执行各种与网络相关的操作.',
  SYSLOG: '执行syslog(2)特权操作.',
  DAC_READ_SEARCH: '绕过文件读取和目录读取以及执行权限的检查.',
  LINUX_IMMUTABLE: '设置 FS_APPEND_FL 和 FS_IMMUTABLE_FL i-node 标志.',
  NET_BROADCAST: '进行套接字广播,并监听多播.',
  IPC_LOCK: '锁定内存（mlock(2)，mlockall(2)，mmap(2)，shmctl(2)）.',
  IPC_OWNER: '绕过为System V IPC对象操作的权限检查.',
  SYS_PTRACE: '使用ptrace(2)跟踪任意进程.',
  SYS_BOOT: '使用reboot(2)和kexec_load(2),重新启动并加载新内核以便执行后续操作.',
  LEASE: '建立起任意文件的租约（参见fcntl(2)）.',
  WAKE_ALARM: '指定触发系统唤醒的设置.',
  BLOCK_SUSPEND: '使用阻止系统挂起的功能.',
};

export function ContainerCapabilities() {
  // all capabilities can be found at https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities
  return [
    new ContainerCapability('SETPCAP', true),
    new ContainerCapability('MKNOD', true),
    new ContainerCapability('AUDIT_WRITE', true),
    new ContainerCapability('CHOWN', true),
    new ContainerCapability('NET_RAW', true),
    new ContainerCapability('DAC_OVERRIDE', true),
    new ContainerCapability('FOWNER', true),
    new ContainerCapability('FSETID', true),
    new ContainerCapability('KILL', true),
    new ContainerCapability('SETGID', true),
    new ContainerCapability('SETUID', true),
    new ContainerCapability('NET_BIND_SERVICE', true),
    new ContainerCapability('SYS_CHROOT', true),
    new ContainerCapability('SETFCAP', true),
    new ContainerCapability('SYS_MODULE', false),
    new ContainerCapability('SYS_RAWIO', false),
    new ContainerCapability('SYS_PACCT', false),
    new ContainerCapability('SYS_ADMIN', false),
    new ContainerCapability('SYS_NICE', false),
    new ContainerCapability('SYS_RESOURCE', false),
    new ContainerCapability('SYS_TIME', false),
    new ContainerCapability('SYS_TTY_CONFIG', false),
    new ContainerCapability('AUDIT_CONTROL', false),
    new ContainerCapability('MAC_ADMIN', false),
    new ContainerCapability('MAC_OVERRIDE', false),
    new ContainerCapability('NET_ADMIN', false),
    new ContainerCapability('SYSLOG', false),
    new ContainerCapability('DAC_READ_SEARCH', false),
    new ContainerCapability('LINUX_IMMUTABLE', false),
    new ContainerCapability('NET_BROADCAST', false),
    new ContainerCapability('IPC_LOCK', false),
    new ContainerCapability('IPC_OWNER', false),
    new ContainerCapability('SYS_PTRACE', false),
    new ContainerCapability('SYS_BOOT', false),
    new ContainerCapability('LEASE', false),
    new ContainerCapability('WAKE_ALARM', false),
    new ContainerCapability('BLOCK_SUSPEND', false),
  ].sort(function (a, b) {
    return a.capability < b.capability ? -1 : 1;
  });
}

export function ContainerCapability(cap, allowed) {
  this.capability = cap;
  this.allowed = allowed;
  this.description = capDesc[cap];
}
